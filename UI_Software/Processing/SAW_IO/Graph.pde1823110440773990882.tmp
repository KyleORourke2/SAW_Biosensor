// Graph class:
// Takes in data object or function and plots it on
// an X Y plot.


class Graph {
  
  color lineColor;
  color graphColor;
  String xText; // x Axis label
  String yText; // y Axis label
  String tText; // Title text
  int xpos;     // x Location of graph
  int ypos;     // y Location of graph
  int Width;    // x Size of graph
  int Height;   // y Size of graph
  float[] DataX;
  float[] DataY;
  
  // Constructor
  // positions x y, dimensions w h, color body, color text
  Graph(float[] dataX, float[] dataY, int x, int y, int w, int h, color lineC, String xT, String yT, String tT){
    lineColor = lineC;
    xText = xT;
    yText = yT;
    tText = tT;
    xpos = x;
    ypos = y;
    Width = w;
    Height = h;
    DataX = dataX;
    DataY = dataY;
    
    // Adjust array by xpos & ypos
    DataX = arrayShift(DataX, xpos);
    DataY = arrayShift(DataY, ypos);
    // Set Y values to correct coordinate system.
    DataY = arrayFlip(DataY, ypos);
    
    // Scale data to fill entire length of graph box
    //DataX = arrayScale(DataX, Width);
  }
  
  void display(){
    // Write Axis & Title Text
    drawLabels(xpos, ypos, Width, Height);
    // Draw graph box:
    drawBox(xpos, ypos, Width, Height);
    drawGrid(xpos, ypos, Width, Height);
    
    for(int i = 0; i < DataX.length-1; i++){
      strokeWeight(2);
      stroke(ch1_color);
      line(DataX[i], DataY[i], DataX[i+1], DataY[i+1]);
    }
    
  } // Display end
  
  
  // HELPER FUNCTIONS:
  
  // Draw text
  void drawLabels(int x, int y, int w, int h){
    fill(ucscBlue);
    textAlign(CENTER, CENTER);
    textSize(30);
    text(tText, x+(w/2), y-h-25);
    textSize(20);
    text(xText, x+(w/2), y+25);
    pushMatrix();
    translate(x,y);
    rotate(-HALF_PI);
    text(yText, h/2, -25);
    popMatrix(); 
  }
  
  // Draw tick values
  void drawTickVals(){
    fill(ucscBlue);
    textAlign(CENTER, CENTER);
    textSize(10);
    
  }
  
  // Draw Grid
  void drawGrid(int x, int y, int w, int h){
    strokeWeight(1);
    stroke(gridLine);
    // Vertical
    for(int i=0; i < 10; i++){
      line(x+(i*(w/10)), y, x+(i*(w/10)), y-h);
    }
    // Horizontal
    for(int i=0; i < 10; i++){
      line(x, y-(i*(h/10)), x+w, y-(i*(h/10)));
    }
  }
  
  // Draw Box
  void drawBox(int x, int y, int w, int h){
    strokeWeight(1);
    stroke(gridLine);
    line(x, y, x+w, y); // Bottom line
    line(x, y, x, y-h); // Left line
    line(x+w, y, x+w, y-h); // Right line
    line(x, y-h, x+w, y-h); // Right line
    fill(10,10,10);
    rectMode(CENTER);
    rect(x+(w/2), y-(h/2), w, h);
  }
  
  // Scales data to fit graph box
  float [] arrayScale(float[] data, int w){
    if(data.length < w){
      int scaleFactor = (w/data.length);
      data = arrayMult(data, scaleFactor);
    }
    else{
      println("ERROR: DATASET TOO LARGE"); // I'll add a compression algo later...
      System.exit(0);
    }
    return data;
  }
  
  
  // Shifts all of array's values by set amount.
  float [] arrayShift(float[] data, int shift){
    for (int i = 0; i < data.length; i++){
      data[i] += shift;
    }
    return data;
  }
  
  // Multiplies data by given value.
  float [] arrayMult(float[] data, float x){
    for (int i = 0; i < data.length; i++){
      data[i] *= x;
    }
    return data;
  }
  
  // Flips data along given value.
  float [] arrayFlip(float[] data, float x){
    for (int i = 0; i < data.length; i++){
      data[i] = data[i] - 2*(data[i] - x);
    }
    return data;
  }
}



 
